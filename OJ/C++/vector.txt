1、只出现一次的数字
思路：异或 相同的数 异或 为0；不同的数异或为 1
var ar = [2,3,2,4,4]

2 ^ 3 ^ 2 ^ 4 ^ 4 等价于 2 ^ 2 ^ 4 ^ 4 ^ 3 => 0 ^ 0 ^3 => 3

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int value=0;
        int sz=nums.size();
        for(int i=0;i<sz;++i)
        {
            value ^= nums[i];
        }
        return value;
    }
};

2、杨辉三角

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> v;
        for(int i=0;i<numRows;++i)
        {
            v.push_back(vector<int> (i+1,1));
            if(i>1)
            {
                for(int j=1;j<i;++j)
                {
                    v[i][j]=v[i-1][j-1]+v[i-1][j];
                }
            }
        }
        return v;
    }
};

第二种
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans(numRows);
        if(numRows == 0)    return ans; //若numRows为空，返回空数组
        for(int i = 0; i < numRows; ++ i ) //给数组一个个赋值
        {
            for(int j = 0; j <= i; ++ j)
            {
                if(j == 0 || j == i) //若是左右两边的边界，赋值为1
                    ans[i].push_back(1);
                else
                    ans[i].push_back(ans[i-1][j-1] + ans[i-1][j]); //否则赋值为该位置左上与右上的和
            }
        }
        return ans;
    }
};

作者：youlookdeliciousc
链接：https://leetcode-cn.com/problems/pascals-triangle/solution/cxiang-xi-ti-jie-by-youlookdeliciousc-4/
来源：力扣（LeetCode）


3.删除有序数组中的重复元项
//错误
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() < 2) return nums.size();
        vector<int>::iterator begin = nums.begin() ;
        vector<int>::iterator end = nums.end();
        while(begin != end)
        {
            if(*begin == *end)
            {
                 end = nums.erase(end);
            }
            ++begin;
            --end;
        }
        return nums.size();
    }
};
错误原因：忽略了是一个有序的数组。
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() < 2) return nums.size();
        int i = 0;
        int j = 1;
        while(j<nums.size())
        {
            if(nums[i] == nums[j])
            {
                ++j;
            }
            else
            {
                ++i;
                nums[i] = nums[j];
                ++j;
            }
        }
       
        return i+1;
    }
};
4.只出现一次的数ii







8.连续子数组的最大和

class Solution {
public:
    int FindGreatestSumOfSubArray(vector<int> array) {
        int Max = 0;
        int total =0;
        for(int i=0;i<array.size();++i)
        {
            if(total < array[i] && total < 0)
            {
                Max = array[i];
                total = array[i];
            }
            else
            {
                total += array[i];
                if(total > Max)
                    Max = total;
            }
        }
        return Max;
    
    }
};

著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。